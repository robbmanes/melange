/*
 * watch_unix_socket_access.stp
 *
 * This is a simply more modern version of the script found here:
 * https://sourceware.org/systemtap/wiki/WSunixSockets
 *
 * The first argument is the location of the file descriptor for a UNIX socket.
 * To find this address, for example, for the Docker socket run:
 *
 * # lsof 2>&1 | awk '/docker.sock/ {print $7}' | grep -v '0t0' | sort -u
 * 0xffff8ed0b4eb1800
 *
 * And use that address to run this systemtap script:
 * 
 * # stap watch_unix_socket_access.stp 0xffff8ed0b4eb1800
 */

probe begin {
        printf("Watching accessors into socket 0x%x...\n", $1);
}

function process_tree() {
        cur_proc = task_current();
        parent_pid = task_pid(task_parent(cur_proc));
        while (parent_pid != 0) {
                printf ("\t%s (%d)\n", task_execname(cur_proc), task_pid(cur_proc));
                cur_proc = task_parent(cur_proc);
                parent_pid = task_pid(task_parent (cur_proc));
        }

        if (task_pid (cur_proc) == 1) {
                printf ("\t%s (%d),%d,%d\n", task_execname(cur_proc), task_pid(cur_proc), task_uid(cur_proc),task_gid (cur_proc));
        }
}

probe kernel.function("unix_stream_sendmsg") {
        if ($sock->sk != $1) {
                printf("PID %d/%s is accessing UNIX socket %p\n", pid(), execname(), $sock->sk);
                process_tree();
                printf("\n======\n");
        }
}